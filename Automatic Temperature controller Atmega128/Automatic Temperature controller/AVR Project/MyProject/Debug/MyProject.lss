
MyProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000cdc  00000d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800168  00800168  00000dd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001797  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c48  00000000  00000000  000026fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad8  00000000  00000000  00003343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00003e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d7  00000000  00000000  00004639  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	dd c0       	rjmp	.+442    	; 0x1c0 <__bad_interrupt>
   6:	00 00       	nop
   8:	db c0       	rjmp	.+438    	; 0x1c0 <__bad_interrupt>
   a:	00 00       	nop
   c:	d9 c0       	rjmp	.+434    	; 0x1c0 <__bad_interrupt>
   e:	00 00       	nop
  10:	d7 c0       	rjmp	.+430    	; 0x1c0 <__bad_interrupt>
  12:	00 00       	nop
  14:	d5 c0       	rjmp	.+426    	; 0x1c0 <__bad_interrupt>
  16:	00 00       	nop
  18:	d3 c0       	rjmp	.+422    	; 0x1c0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d1 c0       	rjmp	.+418    	; 0x1c0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	cf c0       	rjmp	.+414    	; 0x1c0 <__bad_interrupt>
  22:	00 00       	nop
  24:	cd c0       	rjmp	.+410    	; 0x1c0 <__bad_interrupt>
  26:	00 00       	nop
  28:	cb c0       	rjmp	.+406    	; 0x1c0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c9 c0       	rjmp	.+402    	; 0x1c0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c7 c0       	rjmp	.+398    	; 0x1c0 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__bad_interrupt>
  36:	00 00       	nop
  38:	c3 c0       	rjmp	.+390    	; 0x1c0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c1 c0       	rjmp	.+386    	; 0x1c0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	bf c0       	rjmp	.+382    	; 0x1c0 <__bad_interrupt>
  42:	00 00       	nop
  44:	bd c0       	rjmp	.+378    	; 0x1c0 <__bad_interrupt>
  46:	00 00       	nop
  48:	bb c0       	rjmp	.+374    	; 0x1c0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b9 c0       	rjmp	.+370    	; 0x1c0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b7 c0       	rjmp	.+366    	; 0x1c0 <__bad_interrupt>
  52:	00 00       	nop
  54:	b5 c0       	rjmp	.+362    	; 0x1c0 <__bad_interrupt>
  56:	00 00       	nop
  58:	b3 c0       	rjmp	.+358    	; 0x1c0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b1 c0       	rjmp	.+354    	; 0x1c0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	af c0       	rjmp	.+350    	; 0x1c0 <__bad_interrupt>
  62:	00 00       	nop
  64:	ad c0       	rjmp	.+346    	; 0x1c0 <__bad_interrupt>
  66:	00 00       	nop
  68:	ab c0       	rjmp	.+342    	; 0x1c0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a9 c0       	rjmp	.+338    	; 0x1c0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a7 c0       	rjmp	.+334    	; 0x1c0 <__bad_interrupt>
  72:	00 00       	nop
  74:	a5 c0       	rjmp	.+330    	; 0x1c0 <__bad_interrupt>
  76:	00 00       	nop
  78:	a3 c0       	rjmp	.+326    	; 0x1c0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a1 c0       	rjmp	.+322    	; 0x1c0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	9f c0       	rjmp	.+318    	; 0x1c0 <__bad_interrupt>
  82:	00 00       	nop
  84:	9d c0       	rjmp	.+314    	; 0x1c0 <__bad_interrupt>
  86:	00 00       	nop
  88:	9b c0       	rjmp	.+310    	; 0x1c0 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
  8c:	00 40       	sbci	r16, 0x00	; 0
  8e:	7a 10       	cpse	r7, r10
  90:	f3 5a       	subi	r31, 0xA3	; 163
  92:	00 a0       	ldd	r0, Z+32	; 0x20
  94:	72 4e       	sbci	r23, 0xE2	; 226
  96:	18 09       	sbc	r17, r8
  98:	00 10       	cpse	r0, r0
  9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <dtoa_prf+0x1aa>
  9c:	e8 00       	.word	0x00e8	; ????
  9e:	00 e8       	ldi	r16, 0x80	; 128
  a0:	76 48       	sbci	r23, 0x86	; 134
  a2:	17 00       	.word	0x0017	; ????
  a4:	00 e4       	ldi	r16, 0x40	; 64
  a6:	0b 54       	subi	r16, 0x4B	; 75
  a8:	02 00       	.word	0x0002	; ????
  aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
  ac:	9a 3b       	cpi	r25, 0xBA	; 186
  ae:	00 00       	nop
  b0:	00 e1       	ldi	r16, 0x10	; 16
  b2:	f5 05       	cpc	r31, r5
  b4:	00 00       	nop
  b6:	80 96       	adiw	r24, 0x20	; 32
  b8:	98 00       	.word	0x0098	; ????
  ba:	00 00       	nop
  bc:	40 42       	sbci	r20, 0x20	; 32
  be:	0f 00       	.word	0x000f	; ????
  c0:	00 00       	nop
  c2:	a0 86       	std	Z+8, r10	; 0x08
  c4:	01 00       	.word	0x0001	; ????
  c6:	00 00       	nop
  c8:	10 27       	eor	r17, r16
  ca:	00 00       	nop
  cc:	00 00       	nop
  ce:	e8 03       	fmulsu	r22, r16
  d0:	00 00       	nop
  d2:	00 00       	nop
  d4:	64 00       	.word	0x0064	; ????
  d6:	00 00       	nop
  d8:	00 00       	nop
  da:	0a 00       	.word	0x000a	; ????
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	01 00       	.word	0x0001	; ????
  e2:	00 00       	nop
  e4:	00 00       	nop
  e6:	2c 76       	andi	r18, 0x6C	; 108
  e8:	d8 88       	ldd	r13, Y+16	; 0x10
  ea:	dc 67       	ori	r29, 0x7C	; 124
  ec:	4f 08       	sbc	r4, r15
  ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
  f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
  f2:	ae 59       	subi	r26, 0x9E	; 158
  f4:	e1 b1       	in	r30, 0x01	; 1
  f6:	b7 96       	adiw	r30, 0x27	; 39
  f8:	e5 e3       	ldi	r30, 0x35	; 53
  fa:	e4 53       	subi	r30, 0x34	; 52
  fc:	c6 3a       	cpi	r28, 0xA6	; 166
  fe:	e6 51       	subi	r30, 0x16	; 22
 100:	99 76       	andi	r25, 0x69	; 105
 102:	96 e8       	ldi	r25, 0x86	; 134
 104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <__fp_cmp+0x8>
 106:	84 26       	eor	r8, r20
 108:	eb 89       	ldd	r30, Y+19	; 0x13
 10a:	8c 9b       	sbis	0x11, 4	; 17
 10c:	62 ed       	ldi	r22, 0xD2	; 210
 10e:	40 7c       	andi	r20, 0xC0	; 192
 110:	6f fc       	.word	0xfc6f	; ????
 112:	ef bc       	out	0x2f, r14	; 47
 114:	9c 9f       	mul	r25, r28
 116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
 118:	ba a5       	ldd	r27, Y+42	; 0x2a
 11a:	6f a5       	ldd	r22, Y+47	; 0x2f
 11c:	f4 90       	lpm	r15, Z
 11e:	05 5a       	subi	r16, 0xA5	; 165
 120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
 122:	5c 93       	st	X, r21
 124:	6b 6c       	ori	r22, 0xCB	; 203
 126:	f9 67       	ori	r31, 0x79	; 121
 128:	6d c1       	rjmp	.+730    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 12a:	1b fc       	.word	0xfc1b	; ????
 12c:	e0 e4       	ldi	r30, 0x40	; 64
 12e:	0d 47       	sbci	r16, 0x7D	; 125
 130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
 132:	20 e6       	ldi	r18, 0x60	; 96
 134:	b5 00       	.word	0x00b5	; ????
 136:	d0 ed       	ldi	r29, 0xD0	; 208
 138:	90 2e       	mov	r9, r16
 13a:	03 00       	.word	0x0003	; ????
 13c:	94 35       	cpi	r25, 0x54	; 84
 13e:	77 05       	cpc	r23, r7
 140:	00 80       	ld	r0, Z
 142:	84 1e       	adc	r8, r20
 144:	08 00       	.word	0x0008	; ????
 146:	00 20       	and	r0, r0
 148:	4e 0a       	sbc	r4, r30
 14a:	00 00       	nop
 14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
 14e:	0c 33       	cpi	r16, 0x3C	; 60
 150:	33 33       	cpi	r19, 0x33	; 51
 152:	33 0f       	add	r19, r19
 154:	98 6e       	ori	r25, 0xE8	; 232
 156:	12 83       	std	Z+2, r17	; 0x02
 158:	11 41       	sbci	r17, 0x11	; 17
 15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
 15c:	21 14       	cp	r2, r1
 15e:	89 3b       	cpi	r24, 0xB9	; 185
 160:	e6 55       	subi	r30, 0x56	; 86
 162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
 164:	fe e6       	ldi	r31, 0x6E	; 110
 166:	db 18       	sub	r13, r11
 168:	d1 84       	ldd	r13, Z+9	; 0x09
 16a:	4b 38       	cpi	r20, 0x8B	; 139
 16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
 16e:	7c 1d       	adc	r23, r12
 170:	90 1d       	adc	r25, r0
 172:	a4 bb       	out	0x14, r26	; 20
 174:	e4 24       	eor	r14, r4
 176:	20 32       	cpi	r18, 0x20	; 32
 178:	84 72       	andi	r24, 0x24	; 36
 17a:	5e 22       	and	r5, r30
 17c:	81 00       	.word	0x0081	; ????
 17e:	c9 f1       	breq	.+114    	; 0x1f2 <SET_BIT>
 180:	24 ec       	ldi	r18, 0xC4	; 196
 182:	a1 e5       	ldi	r26, 0x51	; 81
 184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d0 e1       	ldi	r29, 0x10	; 16
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
 192:	11 e0       	ldi	r17, 0x01	; 1
 194:	a0 e0       	ldi	r26, 0x00	; 0
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	ec ed       	ldi	r30, 0xDC	; 220
 19a:	fc e0       	ldi	r31, 0x0C	; 12
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	0b bf       	out	0x3b, r16	; 59
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
 1a2:	07 90       	elpm	r0, Z+
 1a4:	0d 92       	st	X+, r0
 1a6:	a8 36       	cpi	r26, 0x68	; 104
 1a8:	b1 07       	cpc	r27, r17
 1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	a8 e6       	ldi	r26, 0x68	; 104
 1b0:	b1 e0       	ldi	r27, 0x01	; 1
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
 1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
 1b6:	ab 36       	cpi	r26, 0x6B	; 107
 1b8:	b2 07       	cpc	r27, r18
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
 1bc:	3d d1       	rcall	.+634    	; 0x438 <main>
 1be:	8c c5       	rjmp	.+2840   	; 0xcd8 <_exit>

000001c0 <__bad_interrupt>:
 1c0:	1f cf       	rjmp	.-450    	; 0x0 <__vectors>

000001c2 <ADC_Init>:


void ADC_Init()
{   
	// ENABLE THE ADC MOUDULE
	SET(ADC_CREG ,7);
 1c2:	37 9a       	sbi	0x06, 7	; 6
	
	//SETTING THA PRESCALAR (DIVISION FACTOR) ---- ADC CLOCK SETTING
	SET(ADC_CREG ,0);
 1c4:	30 9a       	sbi	0x06, 0	; 6
	SET(ADC_CREG ,1);
 1c6:	31 9a       	sbi	0x06, 1	; 6
	CLEAR(ADC_CREG ,2);
 1c8:	32 98       	cbi	0x06, 2	; 6
	
	//LEFT ADJUST FOR RESULTS
	CLEAR(ADC_MUX ,5);
 1ca:	3d 98       	cbi	0x07, 5	; 7
	
	//SELECT THE ADC REFERENCE VOLTAGE 
	SET(ADC_MUX ,6);
 1cc:	3e 9a       	sbi	0x07, 6	; 7
	CLEAR(ADC_MUX ,7);    
 1ce:	3f 98       	cbi	0x07, 7	; 7
 1d0:	08 95       	ret

000001d2 <ADC_Read>:
}

uint16_t  ADC_Read(uint8_t CH)
{
	//SELECT THE CHANNEL TO BE READ
	 *((volatile uint8_t*)ADC_MUX) &= 0xE0;
 1d2:	97 b1       	in	r25, 0x07	; 7
 1d4:	90 7e       	andi	r25, 0xE0	; 224
 1d6:	97 b9       	out	0x07, r25	; 7
	 *((volatile uint8_t*)ADC_MUX) |= CH;
 1d8:	97 b1       	in	r25, 0x07	; 7
 1da:	89 2b       	or	r24, r25
 1dc:	87 b9       	out	0x07, r24	; 7
	
	//START CONVERSION PROCESS  
	SET(ADC_CREG ,6);
 1de:	36 9a       	sbi	0x06, 6	; 6
	
	//WAIT UNTIL THE CONVERSION IS FINISHED 
	while(*((volatile uint8_t*)ADC_CREG) & (1<<6));   
 1e0:	36 99       	sbic	0x06, 6	; 6
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <ADC_Read+0xe>
	
	return *((volatile uint16_t*)ADC_L)  ;
 1e4:	84 b1       	in	r24, 0x04	; 4
 1e6:	95 b1       	in	r25, 0x05	; 5
	//dtostrf((float)(ADC_Read(0)*5)/1024,4,2,str);
}
 1e8:	08 95       	ret

000001ea <DIR_PORT>:
	*((volatile char*)(BASE+2)) &= ~(1<<PIN) ;
}

void FLIP_BIT(uint8_t BASE , uint8_t PIN)                 //TOGGLE A BIT IN SPECIFIC PORT
{
	*((volatile char*)(BASE+2)) ^= 1<<PIN ;
 1ea:	e8 2f       	mov	r30, r24
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	61 83       	std	Z+1, r22	; 0x01
 1f0:	08 95       	ret

000001f2 <SET_BIT>:
 1f2:	e8 2f       	mov	r30, r24
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <SET_BIT+0xe>
 1fe:	22 0f       	add	r18, r18
 200:	6a 95       	dec	r22
 202:	ea f7       	brpl	.-6      	; 0x1fe <SET_BIT+0xc>
 204:	28 2b       	or	r18, r24
 206:	22 83       	std	Z+2, r18	; 0x02
 208:	08 95       	ret

0000020a <CLEAR_BIT>:
 20a:	e8 2f       	mov	r30, r24
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	82 81       	ldd	r24, Z+2	; 0x02
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	01 c0       	rjmp	.+2      	; 0x218 <CLEAR_BIT+0xe>
 216:	22 0f       	add	r18, r18
 218:	6a 95       	dec	r22
 21a:	ea f7       	brpl	.-6      	; 0x216 <CLEAR_BIT+0xc>
 21c:	20 95       	com	r18
 21e:	28 23       	and	r18, r24
 220:	22 83       	std	Z+2, r18	; 0x02
 222:	08 95       	ret

00000224 <READ_BIT>:
}

uint8_t READ_BIT(uint8_t BASE , uint8_t PIN)              //CHECK(GET) A BIT IN SPECIFIC PORT
{
   return  *((volatile char*)(BASE))>>PIN & 1 ;
 224:	e8 2f       	mov	r30, r24
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <READ_BIT+0xe>
 22e:	95 95       	asr	r25
 230:	87 95       	ror	r24
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <READ_BIT+0xa>
}
 236:	81 70       	andi	r24, 0x01	; 1
 238:	08 95       	ret

0000023a <WRITE_PORT>:

void WRITE_PORT(uint8_t BASE , uint8_t VAL)               //WRITE A VALUE TO A SPECIFIC PORT
{
	*((volatile char*)(BASE+2)) = VAL ;
 23a:	e8 2f       	mov	r30, r24
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	62 83       	std	Z+2, r22	; 0x02
 240:	08 95       	ret

00000242 <GetKey>:
static const uint8_t  ROWS = 4; //four rows
static const uint8_t  COLS = 4; //four columns
static uint8_t i,k;

char GetKey(uint8_t Base)
{
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
	DIR_PORT(Base,0x0F);
 246:	6f e0       	ldi	r22, 0x0F	; 15
 248:	d0 df       	rcall	.-96     	; 0x1ea <DIR_PORT>
	WRITE_PORT(Base,0xFF);
 24a:	6f ef       	ldi	r22, 0xFF	; 255
 24c:	8c 2f       	mov	r24, r28
 24e:	f5 df       	rcall	.-22     	; 0x23a <WRITE_PORT>
	
	for (i=0 ; i < ROWS ; i++)
 250:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <i>
 254:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <i>
 258:	64 30       	cpi	r22, 0x04	; 4
	{
	     CLEAR_BIT(Base,i);	 
 25a:	90 f5       	brcc	.+100    	; 0x2c0 <GetKey+0x7e>
 25c:	8c 2f       	mov	r24, r28
 25e:	d5 df       	rcall	.-86     	; 0x20a <CLEAR_BIT>
	/**************************************************************/
		 for (k=0 ; k < COLS ; k++)
 260:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
 264:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <__data_end>
 268:	64 30       	cpi	r22, 0x04	; 4
		 {
			 if(!READ_BIT(Base,k+4))
 26a:	00 f5       	brcc	.+64     	; 0x2ac <GetKey+0x6a>
 26c:	6c 5f       	subi	r22, 0xFC	; 252
 26e:	8c 2f       	mov	r24, r28
 270:	d9 df       	rcall	.-78     	; 0x224 <READ_BIT>
 272:	81 11       	cpse	r24, r1
 274:	15 c0       	rjmp	.+42     	; 0x2a0 <GetKey+0x5e>
			 {
				 while(!READ_BIT(Base,k+4));
 276:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <__data_end>
 27a:	6c 5f       	subi	r22, 0xFC	; 252
 27c:	8c 2f       	mov	r24, r28
 27e:	d2 df       	rcall	.-92     	; 0x224 <READ_BIT>
 280:	88 23       	and	r24, r24
 282:	c9 f3       	breq	.-14     	; 0x276 <GetKey+0x34>
				 return keys[i][k];
 284:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <i>
 288:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 28c:	94 e0       	ldi	r25, 0x04	; 4
 28e:	e9 9f       	mul	r30, r25
 290:	f0 01       	movw	r30, r0
 292:	11 24       	eor	r1, r1
 294:	e0 50       	subi	r30, 0x00	; 0
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	e8 0f       	add	r30, r24
 29a:	f1 1d       	adc	r31, r1
 29c:	80 81       	ld	r24, Z
 29e:	11 c0       	rjmp	.+34     	; 0x2c2 <GetKey+0x80>
	
	for (i=0 ; i < ROWS ; i++)
	{
	     CLEAR_BIT(Base,i);	 
	/**************************************************************/
		 for (k=0 ; k < COLS ; k++)
 2a0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
				 while(!READ_BIT(Base,k+4));
				 return keys[i][k];
			 }
		 }
	 /************************************************************/	
	     SET_BIT(Base,i);
 2aa:	dc cf       	rjmp	.-72     	; 0x264 <GetKey+0x22>
 2ac:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <i>
 2b0:	8c 2f       	mov	r24, r28
 2b2:	9f df       	rcall	.-194    	; 0x1f2 <SET_BIT>
char GetKey(uint8_t Base)
{
	DIR_PORT(Base,0x0F);
	WRITE_PORT(Base,0xFF);
	
	for (i=0 ; i < ROWS ; i++)
 2b4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <i>
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <i>
 2be:	ca cf       	rjmp	.-108    	; 0x254 <GetKey+0x12>
		 }
	 /************************************************************/	
	     SET_BIT(Base,i);
	}
	
	return 0;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
}
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <LCD_Command>:

/****************** FUNCTION TO SEND A COMMAND TO LCD *************/

void LCD_Command(unsigned char cmd)
{
	LCD_Data_Port=((LCD_Data_Port & 0x0F) | (cmd & 0xF0));/* Sending upper nibble */
 2c6:	98 b3       	in	r25, 0x18	; 24
 2c8:	9f 70       	andi	r25, 0x0F	; 15
 2ca:	28 2f       	mov	r18, r24
 2cc:	20 7f       	andi	r18, 0xF0	; 240
 2ce:	92 2b       	or	r25, r18
 2d0:	98 bb       	out	0x18, r25	; 24
	LCD_Command_Port  &= ~(1<<RS);	/* RS=0 command reg. */
 2d2:	c2 98       	cbi	0x18, 2	; 24
	//LCD_Command_Port  &= ~(1<<RW);	/* RW=0 Write operation */
	LCD_Command_Port  |= (1<<EN);	/* Enable pulse */
 2d4:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port  &= ~(1<<EN);
 2d8:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	e3 ef       	ldi	r30, 0xF3	; 243
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_Command+0x18>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_Command+0x1e>
 2e4:	00 00       	nop
	_delay_ms(2); //Wait
	LCD_Data_Port=((LCD_Data_Port & 0x0F) | (cmd<<4));/* Sending lower nibble */
 2e6:	28 b3       	in	r18, 0x18	; 24
 2e8:	2f 70       	andi	r18, 0x0F	; 15
 2ea:	f0 e1       	ldi	r31, 0x10	; 16
 2ec:	8f 9f       	mul	r24, r31
 2ee:	c0 01       	movw	r24, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	82 2b       	or	r24, r18
 2f4:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port  |= (1<<EN);	/* Enable pulse */
 2f6:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port  &= ~(1<<EN);
 2fa:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	81 ee       	ldi	r24, 0xE1	; 225
 2fe:	94 e0       	ldi	r25, 0x04	; 4
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_Command+0x3a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_Command+0x40>
 306:	00 00       	nop
 308:	08 95       	ret

0000030a <LCD_Init>:
}

/****************** FUNCTION TO INITIALIZE THE LCD *************/
void LCD_Init (void)	/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<EN);	/* Make LCD command port direction as o/p */
 30a:	87 b3       	in	r24, 0x17	; 23
 30c:	8c 60       	ori	r24, 0x0C	; 12
 30e:	87 bb       	out	0x17, r24	; 23
	LCD_Data_Dir = 0xFF;	/* Make LCD data port direction as o/p */
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	87 bb       	out	0x17, r24	; 23
 314:	87 e8       	ldi	r24, 0x87	; 135
 316:	93 e1       	ldi	r25, 0x13	; 19
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_Init+0xe>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_Init+0x14>
 31e:	00 00       	nop
    
	_delay_ms(20);		/* LCD Power ON delay always >15ms */
	LCD_Command_Port  &= ~(1<<EN);
 320:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_Init+0x1a>
	_delay_us(2);        //Wait some time to do its Operation
	LCD_Command(0x33);
 324:	83 e3       	ldi	r24, 0x33	; 51
 326:	cf df       	rcall	.-98     	; 0x2c6 <LCD_Command>
	LCD_Command(0x32);
 328:	82 e3       	ldi	r24, 0x32	; 50
 32a:	cd df       	rcall	.-102    	; 0x2c6 <LCD_Command>
	LCD_Command (0x28);	/* Initialization of 16X2 LCD in 4bit mode */
 32c:	88 e2       	ldi	r24, 0x28	; 40
 32e:	cb df       	rcall	.-106    	; 0x2c6 <LCD_Command>
	LCD_Command (0x01);	/* clear display */
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	c9 df       	rcall	.-110    	; 0x2c6 <LCD_Command>
	LCD_Command (0x02);	/* cursor at home position */
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	c7 df       	rcall	.-114    	; 0x2c6 <LCD_Command>
	LCD_Command (0x0E);	/* Display ON Cursor OFF */
 338:	8e e0       	ldi	r24, 0x0E	; 14
 33a:	c5 df       	rcall	.-118    	; 0x2c6 <LCD_Command>
 33c:	86 e0       	ldi	r24, 0x06	; 6
	LCD_Command (0x06);	/* Auto Increment cursor */
 33e:	c3 cf       	rjmp	.-122    	; 0x2c6 <LCD_Command>

00000340 <LCD_Char>:
 340:	98 b3       	in	r25, 0x18	; 24
 342:	9f 70       	andi	r25, 0x0F	; 15

/****************** FUNCTION TO WRITE A CHARACHTER ON LCD *************/

void LCD_Char (unsigned char char_data)	/* LCD data write function */
{
	LCD_Data_Port=((LCD_Data_Port & 0x0F) | ( char_data & 0xF0));/* Sending upper nibble */
 344:	28 2f       	mov	r18, r24
 346:	20 7f       	andi	r18, 0xF0	; 240
 348:	92 2b       	or	r25, r18
 34a:	98 bb       	out	0x18, r25	; 24
	LCD_Command_Port  |= (1<<RS);	/* RS=1 Data reg. */
 34c:	c2 9a       	sbi	0x18, 2	; 24
	//LCD_Command_Port  &= ~(1<<RW);	/* RW=0 Write operation */
	LCD_Command_Port  |= (1<<EN);	/* Enable pulse */
 34e:	c3 9a       	sbi	0x18, 3	; 24
 350:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port  &= ~(1<<EN);
 352:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	e9 ef       	ldi	r30, 0xF9	; 249
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_Char+0x18>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_Char+0x1e>
 35e:	00 00       	nop
	_delay_ms(1); //Wait
	LCD_Data_Port=((LCD_Data_Port & 0x0F) | ( char_data<<4));/* Sending lower nibble */
 360:	28 b3       	in	r18, 0x18	; 24
 362:	2f 70       	andi	r18, 0x0F	; 15
 364:	f0 e1       	ldi	r31, 0x10	; 16
 366:	8f 9f       	mul	r24, r31
 368:	c0 01       	movw	r24, r0
 36a:	11 24       	eor	r1, r1
 36c:	82 2b       	or	r24, r18
 36e:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port  |= (1<<EN);	/* Enable pulse */
 370:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port  &= ~(1<<EN);
 374:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	81 ee       	ldi	r24, 0xE1	; 225
 378:	94 e0       	ldi	r25, 0x04	; 4
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_Char+0x3a>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_Char+0x40>
 380:	00 00       	nop
 382:	08 95       	ret

00000384 <LCD_String>:
}

/****************** FUNCTION TO WRITE A STRING ON LCD *************/

void LCD_String (char *str)
{
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
	for(i=0;str[i]!=0;i++)  /* send each char of string till the NULL */
 38a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <i>
 38e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <i>
 392:	fe 01       	movw	r30, r28
 394:	e8 0f       	add	r30, r24
 396:	f1 1d       	adc	r31, r1
 398:	80 81       	ld	r24, Z
 39a:	88 23       	and	r24, r24
 39c:	39 f0       	breq	.+14     	; 0x3ac <LCD_String+0x28>
	{
		LCD_Char (str[i]);  /* call LCD data write */
 39e:	d0 df       	rcall	.-96     	; 0x340 <LCD_Char>

/****************** FUNCTION TO WRITE A STRING ON LCD *************/

void LCD_String (char *str)
{
	for(i=0;str[i]!=0;i++)  /* send each char of string till the NULL */
 3a0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <i>
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <i>
 3aa:	f1 cf       	rjmp	.-30     	; 0x38e <LCD_String+0xa>
	{
		LCD_Char (str[i]);  /* call LCD data write */
	}
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <LCD_Clear>:

/****************** FUNCTION TO Clear LCD *************/
void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	88 df       	rcall	.-240    	; 0x2c6 <LCD_Command>
	LCD_Command (0x80);		/* cursor at home position */
 3b6:	80 e8       	ldi	r24, 0x80	; 128
 3b8:	86 cf       	rjmp	.-244    	; 0x2c6 <LCD_Command>

000003ba <LCD_String_xy>:
}
/****************** Send string to LCD with xy position *************/

void LCD_String_xy (char row, char pos, char *str)   /* Send string to LCD with xy position */
{
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 3c0:	81 11       	cpse	r24, r1
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <LCD_String_xy+0x14>
 3c4:	60 31       	cpi	r22, 0x10	; 16
 3c6:	50 f4       	brcc	.+20     	; 0x3dc <LCD_String_xy+0x22>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 3c8:	86 2f       	mov	r24, r22
 3ca:	80 68       	ori	r24, 0x80	; 128
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <LCD_String_xy+0x20>
	else if (row == 1 && pos<16)
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	29 f4       	brne	.+10     	; 0x3dc <LCD_String_xy+0x22>
 3d2:	60 31       	cpi	r22, 0x10	; 16
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <LCD_String_xy+0x22>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 3d6:	86 2f       	mov	r24, r22
 3d8:	80 6c       	ori	r24, 0xC0	; 192
 3da:	75 df       	rcall	.-278    	; 0x2c6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 3dc:	ce 01       	movw	r24, r28
 3de:	df 91       	pop	r29
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
 3e0:	cf 91       	pop	r28
 3e2:	d0 cf       	rjmp	.-96     	; 0x384 <LCD_String>

000003e4 <EnterRef>:
#include "LCD.h"
#include "KEYPAD.h"
#include "GPIO_MCAL.h"

void EnterRef(char *Buff)
{
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	8c 01       	movw	r16, r24
	char  key ,i=0;
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
	while (1)
	{
			key=  GetKey( D_Base );
 3ee:	80 e3       	ldi	r24, 0x30	; 48
 3f0:	28 df       	rcall	.-432    	; 0x242 <GetKey>
			if (key == '=')
 3f2:	8d 33       	cpi	r24, 0x3D	; 61
 3f4:	31 f4       	brne	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			{ 
				Buff[3]='\0';
 3f6:	f8 01       	movw	r30, r16
 3f8:	13 82       	std	Z+3, r1	; 0x03
				i++;
			}
	}

	
}
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	08 95       	ret
			if (key == '=')
			{ 
				Buff[3]='\0';
				return;
			}
			if ((key == 'X') && (i>0))
 402:	88 35       	cpi	r24, 0x58	; 88
 404:	71 f4       	brne	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 406:	cc 23       	and	r28, r28
 408:	81 f0       	breq	.+32     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				LCD_Command(0x10);
 40a:	80 e1       	ldi	r24, 0x10	; 16
 40c:	5c df       	rcall	.-328    	; 0x2c6 <LCD_Command>
				LCD_Char('\0');
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	97 df       	rcall	.-210    	; 0x340 <LCD_Char>
				LCD_Command(0x10);
 412:	80 e1       	ldi	r24, 0x10	; 16
 414:	58 df       	rcall	.-336    	; 0x2c6 <LCD_Command>
 416:	c1 50       	subi	r28, 0x01	; 1
				Buff[--i]=0;
 418:	f8 01       	movw	r30, r16
 41a:	ec 0f       	add	r30, r28
 41c:	f1 1d       	adc	r31, r1
 41e:	10 82       	st	Z, r1
 420:	e6 cf       	rjmp	.-52     	; 0x3ee <EnterRef+0xa>
 422:	88 23       	and	r24, r24
			}
			
			else if ((key != 0) && (i<3))
 424:	21 f3       	breq	.-56     	; 0x3ee <EnterRef+0xa>
 426:	c3 30       	cpi	r28, 0x03	; 3
 428:	10 f7       	brcc	.-60     	; 0x3ee <EnterRef+0xa>
 42a:	f8 01       	movw	r30, r16
			{
				Buff[i]=key;
 42c:	ec 0f       	add	r30, r28
 42e:	f1 1d       	adc	r31, r1
 430:	80 83       	st	Z, r24
				LCD_Char(key);
 432:	86 df       	rcall	.-244    	; 0x340 <LCD_Char>
 434:	cf 5f       	subi	r28, 0xFF	; 255
				i++;
 436:	db cf       	rjmp	.-74     	; 0x3ee <EnterRef+0xa>

00000438 <main>:
 438:	cf 93       	push	r28
	}

	
}
int main(void)
{
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	2a 97       	sbiw	r28, 0x0a	; 10
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
	char Buff[6],Ref_Value[4] , key; float read ;
	DDRC |=(1<<PC0)|(1<<PC1);
 44c:	84 b3       	in	r24, 0x14	; 20
 44e:	83 60       	ori	r24, 0x03	; 3
 450:	84 bb       	out	0x14, r24	; 20
	ADC_Init(PA0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	b5 de       	rcall	.-662    	; 0x1c2 <ADC_Init>
	LCD_Init();
 458:	58 df       	rcall	.-336    	; 0x30a <LCD_Init>
 45a:	40 e1       	ldi	r20, 0x10	; 16
   /************************************************************************************/
	while (1)
	{
		LCD_String_xy(0,4,"Automatic");
 45c:	51 e0       	ldi	r21, 0x01	; 1
 45e:	64 e0       	ldi	r22, 0x04	; 4
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	ab df       	rcall	.-170    	; 0x3ba <LCD_String_xy>
 464:	4a e1       	ldi	r20, 0x1A	; 26
		LCD_String_xy(1,2,"Temp Control");
 466:	51 e0       	ldi	r21, 0x01	; 1
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	a6 df       	rcall	.-180    	; 0x3ba <LCD_String_xy>
 46e:	2f ef       	ldi	r18, 0xFF	; 255
 470:	3d e3       	ldi	r19, 0x3D	; 61
 472:	89 e4       	ldi	r24, 0x49	; 73
 474:	21 50       	subi	r18, 0x01	; 1
 476:	30 40       	sbci	r19, 0x00	; 0
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <main+0x3c>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <main+0x46>
 47e:	00 00       	nop
		_delay_ms(3000);
		LCD_Clear();
 480:	98 df       	rcall	.-208    	; 0x3b2 <LCD_Clear>
		LCD_String_xy(0,0,"Enter Temp Ref");
 482:	47 e2       	ldi	r20, 0x27	; 39
 484:	51 e0       	ldi	r21, 0x01	; 1
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	97 df       	rcall	.-210    	; 0x3ba <LCD_String_xy>
		LCD_String_xy(1,0,"Temp Ref: ");
 48c:	46 e3       	ldi	r20, 0x36	; 54
 48e:	51 e0       	ldi	r21, 0x01	; 1
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
		EnterRef(Ref_Value);
 494:	92 df       	rcall	.-220    	; 0x3ba <LCD_String_xy>
 496:	ce 01       	movw	r24, r28
 498:	07 96       	adiw	r24, 0x07	; 7
		LCD_Clear();
 49a:	a4 df       	rcall	.-184    	; 0x3e4 <EnterRef>
		LCD_String_xy(0,0,"Temp Ref: ");
 49c:	8a df       	rcall	.-236    	; 0x3b2 <LCD_Clear>
 49e:	46 e3       	ldi	r20, 0x36	; 54
 4a0:	51 e0       	ldi	r21, 0x01	; 1
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
		LCD_String(Ref_Value);
 4a6:	89 df       	rcall	.-238    	; 0x3ba <LCD_String_xy>
 4a8:	ce 01       	movw	r24, r28
		LCD_String("'C");
 4aa:	07 96       	adiw	r24, 0x07	; 7
 4ac:	6b df       	rcall	.-298    	; 0x384 <LCD_String>
 4ae:	81 e4       	ldi	r24, 0x41	; 65
		LCD_String_xy(1,0,"Press = to Cont.");
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	68 df       	rcall	.-304    	; 0x384 <LCD_String>
 4b4:	44 e4       	ldi	r20, 0x44	; 68
 4b6:	51 e0       	ldi	r21, 0x01	; 1
 4b8:	60 e0       	ldi	r22, 0x00	; 0
	    
		while ((key = GetKey( D_Base)) == 0);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	7e df       	rcall	.-260    	; 0x3ba <LCD_String_xy>
 4be:	80 e3       	ldi	r24, 0x30	; 48
		if (key == '=')
 4c0:	c0 de       	rcall	.-640    	; 0x242 <GetKey>
		{
			break;
		}
		else
		{
			LCD_Clear();
 4c2:	88 23       	and	r24, r24
 4c4:	e1 f3       	breq	.-8      	; 0x4be <main+0x86>
		}
	}
 4c6:	8d 33       	cpi	r24, 0x3D	; 61
	
	LCD_Clear();
 4c8:	11 f0       	breq	.+4      	; 0x4ce <main+0x96>
	LCD_String_xy(0,0,"Temp Ref: ");
 4ca:	73 df       	rcall	.-282    	; 0x3b2 <LCD_Clear>
 4cc:	c6 cf       	rjmp	.-116    	; 0x45a <main+0x22>
 4ce:	71 df       	rcall	.-286    	; 0x3b2 <LCD_Clear>
 4d0:	46 e3       	ldi	r20, 0x36	; 54
 4d2:	51 e0       	ldi	r21, 0x01	; 1
	LCD_String(Ref_Value);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	70 df       	rcall	.-288    	; 0x3ba <LCD_String_xy>
 4da:	ce 01       	movw	r24, r28
	LCD_String("'C");
 4dc:	07 96       	adiw	r24, 0x07	; 7
 4de:	52 df       	rcall	.-348    	; 0x384 <LCD_String>
 4e0:	81 e4       	ldi	r24, 0x41	; 65
 4e2:	91 e0       	ldi	r25, 0x01	; 1
    LCD_String_xy(1,0,"Temp = ");
 4e4:	4f df       	rcall	.-354    	; 0x384 <LCD_String>
 4e6:	45 e5       	ldi	r20, 0x55	; 85
 4e8:	51 e0       	ldi	r21, 0x01	; 1
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1

    while (1) 
    {
		    read =(float)(ADC_Read(0)*500)/1024;
 4ee:	65 df       	rcall	.-310    	; 0x3ba <LCD_String_xy>
 4f0:	84 ef       	ldi	r24, 0xF4	; 244
 4f2:	e8 2e       	mov	r14, r24
 4f4:	ff 24       	eor	r15, r15
 4f6:	f3 94       	inc	r15
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	6b de       	rcall	.-810    	; 0x1d2 <ADC_Read>
 4fc:	9c 01       	movw	r18, r24
 4fe:	2e 9d       	mul	r18, r14
 500:	c0 01       	movw	r24, r0
 502:	2f 9d       	mul	r18, r15
 504:	90 0d       	add	r25, r0
 506:	3e 9d       	mul	r19, r14
 508:	90 0d       	add	r25, r0
 50a:	11 24       	eor	r1, r1
 50c:	bc 01       	movw	r22, r24
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	37 d0       	rcall	.+110    	; 0x582 <__floatunsisf>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	40 e8       	ldi	r20, 0x80	; 128
 51a:	5a e3       	ldi	r21, 0x3A	; 58
		    dtostrf(read,4,2,Buff);
 51c:	73 d0       	rcall	.+230    	; 0x604 <__mulsf3>
 51e:	4b 01       	movw	r8, r22
 520:	5c 01       	movw	r10, r24
 522:	8e 01       	movw	r16, r28
 524:	0f 5f       	subi	r16, 0xFF	; 255
 526:	1f 4f       	sbci	r17, 0xFF	; 255
			LCD_String_xy(1,7,Buff);
 528:	22 e0       	ldi	r18, 0x02	; 2
 52a:	44 e0       	ldi	r20, 0x04	; 4
 52c:	43 d1       	rcall	.+646    	; 0x7b4 <dtostrf>
 52e:	a8 01       	movw	r20, r16
 530:	67 e0       	ldi	r22, 0x07	; 7
			LCD_String("'C");
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	42 df       	rcall	.-380    	; 0x3ba <LCD_String_xy>
 536:	81 e4       	ldi	r24, 0x41	; 65
 538:	91 e0       	ldi	r25, 0x01	; 1
			if(read>atoi(Ref_Value))
 53a:	24 df       	rcall	.-440    	; 0x384 <LCD_String>
 53c:	ce 01       	movw	r24, r28
 53e:	07 96       	adiw	r24, 0x07	; 7
 540:	58 d1       	rcall	.+688    	; 0x7f2 <atoi>
 542:	bc 01       	movw	r22, r24
 544:	99 0f       	add	r25, r25
 546:	88 0b       	sbc	r24, r24
 548:	99 0b       	sbc	r25, r25
 54a:	1d d0       	rcall	.+58     	; 0x586 <__floatsisf>
 54c:	9b 01       	movw	r18, r22
 54e:	ac 01       	movw	r20, r24
 550:	c5 01       	movw	r24, r10
 552:	b4 01       	movw	r22, r8
 554:	53 d0       	rcall	.+166    	; 0x5fc <__gesf2>
 556:	18 16       	cp	r1, r24
 558:	1c f4       	brge	.+6      	; 0x560 <main+0x128>
 55a:	a9 9a       	sbi	0x15, 1	; 21
			{
				PORTC |=(1<<PC1);
 55c:	a8 98       	cbi	0x15, 0	; 21
				PORTC &=~(1<<PC0);
 55e:	02 c0       	rjmp	.+4      	; 0x564 <main+0x12c>
 560:	a8 9a       	sbi	0x15, 0	; 21
			}
			else
			{
				PORTC |=(1<<PC0);
 562:	a9 98       	cbi	0x15, 1	; 21
				PORTC &=~(1<<PC1);
 564:	3f ef       	ldi	r19, 0xFF	; 255
 566:	8d e3       	ldi	r24, 0x3D	; 61
 568:	99 e4       	ldi	r25, 0x49	; 73
 56a:	31 50       	subi	r19, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <main+0x132>
 572:	00 c0       	rjmp	.+0      	; 0x574 <main+0x13c>
 574:	00 00       	nop
 576:	4d e5       	ldi	r20, 0x5D	; 93
			}
			_delay_ms(3000); 
			LCD_String_xy(1,7,"         ");
 578:	51 e0       	ldi	r21, 0x01	; 1
 57a:	67 e0       	ldi	r22, 0x07	; 7
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	1d df       	rcall	.-454    	; 0x3ba <LCD_String_xy>
 580:	bb cf       	rjmp	.-138    	; 0x4f8 <main+0xc0>

00000582 <__floatunsisf>:
 582:	e8 94       	clt
    }
 584:	09 c0       	rjmp	.+18     	; 0x598 <__floatsisf+0x12>

00000586 <__floatsisf>:
 586:	97 fb       	bst	r25, 7
 588:	3e f4       	brtc	.+14     	; 0x598 <__floatsisf+0x12>
 58a:	90 95       	com	r25
 58c:	80 95       	com	r24
 58e:	70 95       	com	r23
 590:	61 95       	neg	r22
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	99 23       	and	r25, r25
 59a:	a9 f0       	breq	.+42     	; 0x5c6 <__floatsisf+0x40>
 59c:	f9 2f       	mov	r31, r25
 59e:	96 e9       	ldi	r25, 0x96	; 150
 5a0:	bb 27       	eor	r27, r27
 5a2:	93 95       	inc	r25
 5a4:	f6 95       	lsr	r31
 5a6:	87 95       	ror	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b7 95       	ror	r27
 5ae:	f1 11       	cpse	r31, r1
 5b0:	f8 cf       	rjmp	.-16     	; 0x5a2 <__floatsisf+0x1c>
 5b2:	fa f4       	brpl	.+62     	; 0x5f2 <__floatsisf+0x6c>
 5b4:	bb 0f       	add	r27, r27
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__floatsisf+0x36>
 5b8:	60 ff       	sbrs	r22, 0
 5ba:	1b c0       	rjmp	.+54     	; 0x5f2 <__floatsisf+0x6c>
 5bc:	6f 5f       	subi	r22, 0xFF	; 255
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	16 c0       	rjmp	.+44     	; 0x5f2 <__floatsisf+0x6c>
 5c6:	88 23       	and	r24, r24
 5c8:	11 f0       	breq	.+4      	; 0x5ce <__floatsisf+0x48>
 5ca:	96 e9       	ldi	r25, 0x96	; 150
 5cc:	11 c0       	rjmp	.+34     	; 0x5f0 <__floatsisf+0x6a>
 5ce:	77 23       	and	r23, r23
 5d0:	21 f0       	breq	.+8      	; 0x5da <__floatsisf+0x54>
 5d2:	9e e8       	ldi	r25, 0x8E	; 142
 5d4:	87 2f       	mov	r24, r23
 5d6:	76 2f       	mov	r23, r22
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <__floatsisf+0x5e>
 5da:	66 23       	and	r22, r22
 5dc:	71 f0       	breq	.+28     	; 0x5fa <__floatsisf+0x74>
 5de:	96 e8       	ldi	r25, 0x86	; 134
 5e0:	86 2f       	mov	r24, r22
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	2a f0       	brmi	.+10     	; 0x5f2 <__floatsisf+0x6c>
 5e8:	9a 95       	dec	r25
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	da f7       	brpl	.-10     	; 0x5e8 <__floatsisf+0x62>
 5f2:	88 0f       	add	r24, r24
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <__gesf2>:
 5fc:	66 d0       	rcall	.+204    	; 0x6ca <__fp_cmp>
 5fe:	08 f4       	brcc	.+2      	; 0x602 <__gesf2+0x6>
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	08 95       	ret

00000604 <__mulsf3>:
 604:	0b d0       	rcall	.+22     	; 0x61c <__mulsf3x>
 606:	9c c0       	rjmp	.+312    	; 0x740 <__fp_round>
 608:	8d d0       	rcall	.+282    	; 0x724 <__fp_pscA>
 60a:	28 f0       	brcs	.+10     	; 0x616 <__mulsf3+0x12>
 60c:	92 d0       	rcall	.+292    	; 0x732 <__fp_pscB>
 60e:	18 f0       	brcs	.+6      	; 0x616 <__mulsf3+0x12>
 610:	95 23       	and	r25, r21
 612:	09 f0       	breq	.+2      	; 0x616 <__mulsf3+0x12>
 614:	7e c0       	rjmp	.+252    	; 0x712 <__fp_inf>
 616:	83 c0       	rjmp	.+262    	; 0x71e <__fp_nan>
 618:	11 24       	eor	r1, r1
 61a:	c6 c0       	rjmp	.+396    	; 0x7a8 <__fp_szero>

0000061c <__mulsf3x>:
 61c:	a2 d0       	rcall	.+324    	; 0x762 <__fp_split3>
 61e:	a0 f3       	brcs	.-24     	; 0x608 <__mulsf3+0x4>

00000620 <__mulsf3_pse>:
 620:	95 9f       	mul	r25, r21
 622:	d1 f3       	breq	.-12     	; 0x618 <__mulsf3+0x14>
 624:	95 0f       	add	r25, r21
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	55 1f       	adc	r21, r21
 62a:	62 9f       	mul	r22, r18
 62c:	f0 01       	movw	r30, r0
 62e:	72 9f       	mul	r23, r18
 630:	bb 27       	eor	r27, r27
 632:	f0 0d       	add	r31, r0
 634:	b1 1d       	adc	r27, r1
 636:	63 9f       	mul	r22, r19
 638:	aa 27       	eor	r26, r26
 63a:	f0 0d       	add	r31, r0
 63c:	b1 1d       	adc	r27, r1
 63e:	aa 1f       	adc	r26, r26
 640:	64 9f       	mul	r22, r20
 642:	66 27       	eor	r22, r22
 644:	b0 0d       	add	r27, r0
 646:	a1 1d       	adc	r26, r1
 648:	66 1f       	adc	r22, r22
 64a:	82 9f       	mul	r24, r18
 64c:	22 27       	eor	r18, r18
 64e:	b0 0d       	add	r27, r0
 650:	a1 1d       	adc	r26, r1
 652:	62 1f       	adc	r22, r18
 654:	73 9f       	mul	r23, r19
 656:	b0 0d       	add	r27, r0
 658:	a1 1d       	adc	r26, r1
 65a:	62 1f       	adc	r22, r18
 65c:	83 9f       	mul	r24, r19
 65e:	a0 0d       	add	r26, r0
 660:	61 1d       	adc	r22, r1
 662:	22 1f       	adc	r18, r18
 664:	74 9f       	mul	r23, r20
 666:	33 27       	eor	r19, r19
 668:	a0 0d       	add	r26, r0
 66a:	61 1d       	adc	r22, r1
 66c:	23 1f       	adc	r18, r19
 66e:	84 9f       	mul	r24, r20
 670:	60 0d       	add	r22, r0
 672:	21 1d       	adc	r18, r1
 674:	82 2f       	mov	r24, r18
 676:	76 2f       	mov	r23, r22
 678:	6a 2f       	mov	r22, r26
 67a:	11 24       	eor	r1, r1
 67c:	9f 57       	subi	r25, 0x7F	; 127
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	8a f0       	brmi	.+34     	; 0x6a4 <__mulsf3_pse+0x84>
 682:	e1 f0       	breq	.+56     	; 0x6bc <__mulsf3_pse+0x9c>
 684:	88 23       	and	r24, r24
 686:	4a f0       	brmi	.+18     	; 0x69a <__mulsf3_pse+0x7a>
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	bb 1f       	adc	r27, r27
 68e:	66 1f       	adc	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	91 50       	subi	r25, 0x01	; 1
 696:	50 40       	sbci	r21, 0x00	; 0
 698:	a9 f7       	brne	.-22     	; 0x684 <__mulsf3_pse+0x64>
 69a:	9e 3f       	cpi	r25, 0xFE	; 254
 69c:	51 05       	cpc	r21, r1
 69e:	70 f0       	brcs	.+28     	; 0x6bc <__mulsf3_pse+0x9c>
 6a0:	38 c0       	rjmp	.+112    	; 0x712 <__fp_inf>
 6a2:	82 c0       	rjmp	.+260    	; 0x7a8 <__fp_szero>
 6a4:	5f 3f       	cpi	r21, 0xFF	; 255
 6a6:	ec f3       	brlt	.-6      	; 0x6a2 <__mulsf3_pse+0x82>
 6a8:	98 3e       	cpi	r25, 0xE8	; 232
 6aa:	dc f3       	brlt	.-10     	; 0x6a2 <__mulsf3_pse+0x82>
 6ac:	86 95       	lsr	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b7 95       	ror	r27
 6b4:	f7 95       	ror	r31
 6b6:	e7 95       	ror	r30
 6b8:	9f 5f       	subi	r25, 0xFF	; 255
 6ba:	c1 f7       	brne	.-16     	; 0x6ac <__mulsf3_pse+0x8c>
 6bc:	fe 2b       	or	r31, r30
 6be:	88 0f       	add	r24, r24
 6c0:	91 1d       	adc	r25, r1
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	97 f9       	bld	r25, 7
 6c8:	08 95       	ret

000006ca <__fp_cmp>:
 6ca:	99 0f       	add	r25, r25
 6cc:	00 08       	sbc	r0, r0
 6ce:	55 0f       	add	r21, r21
 6d0:	aa 0b       	sbc	r26, r26
 6d2:	e0 e8       	ldi	r30, 0x80	; 128
 6d4:	fe ef       	ldi	r31, 0xFE	; 254
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	e8 07       	cpc	r30, r24
 6dc:	f9 07       	cpc	r31, r25
 6de:	c0 f0       	brcs	.+48     	; 0x710 <__fp_cmp+0x46>
 6e0:	12 16       	cp	r1, r18
 6e2:	13 06       	cpc	r1, r19
 6e4:	e4 07       	cpc	r30, r20
 6e6:	f5 07       	cpc	r31, r21
 6e8:	98 f0       	brcs	.+38     	; 0x710 <__fp_cmp+0x46>
 6ea:	62 1b       	sub	r22, r18
 6ec:	73 0b       	sbc	r23, r19
 6ee:	84 0b       	sbc	r24, r20
 6f0:	95 0b       	sbc	r25, r21
 6f2:	39 f4       	brne	.+14     	; 0x702 <__fp_cmp+0x38>
 6f4:	0a 26       	eor	r0, r26
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_cmp+0x46>
 6f8:	23 2b       	or	r18, r19
 6fa:	24 2b       	or	r18, r20
 6fc:	25 2b       	or	r18, r21
 6fe:	21 f4       	brne	.+8      	; 0x708 <__fp_cmp+0x3e>
 700:	08 95       	ret
 702:	0a 26       	eor	r0, r26
 704:	09 f4       	brne	.+2      	; 0x708 <__fp_cmp+0x3e>
 706:	a1 40       	sbci	r26, 0x01	; 1
 708:	a6 95       	lsr	r26
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	81 1d       	adc	r24, r1
 70e:	81 1d       	adc	r24, r1
 710:	08 95       	ret

00000712 <__fp_inf>:
 712:	97 f9       	bld	r25, 7
 714:	9f 67       	ori	r25, 0x7F	; 127
 716:	80 e8       	ldi	r24, 0x80	; 128
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	08 95       	ret

0000071e <__fp_nan>:
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	80 ec       	ldi	r24, 0xC0	; 192
 722:	08 95       	ret

00000724 <__fp_pscA>:
 724:	00 24       	eor	r0, r0
 726:	0a 94       	dec	r0
 728:	16 16       	cp	r1, r22
 72a:	17 06       	cpc	r1, r23
 72c:	18 06       	cpc	r1, r24
 72e:	09 06       	cpc	r0, r25
 730:	08 95       	ret

00000732 <__fp_pscB>:
 732:	00 24       	eor	r0, r0
 734:	0a 94       	dec	r0
 736:	12 16       	cp	r1, r18
 738:	13 06       	cpc	r1, r19
 73a:	14 06       	cpc	r1, r20
 73c:	05 06       	cpc	r0, r21
 73e:	08 95       	ret

00000740 <__fp_round>:
 740:	09 2e       	mov	r0, r25
 742:	03 94       	inc	r0
 744:	00 0c       	add	r0, r0
 746:	11 f4       	brne	.+4      	; 0x74c <__fp_round+0xc>
 748:	88 23       	and	r24, r24
 74a:	52 f0       	brmi	.+20     	; 0x760 <__fp_round+0x20>
 74c:	bb 0f       	add	r27, r27
 74e:	40 f4       	brcc	.+16     	; 0x760 <__fp_round+0x20>
 750:	bf 2b       	or	r27, r31
 752:	11 f4       	brne	.+4      	; 0x758 <__fp_round+0x18>
 754:	60 ff       	sbrs	r22, 0
 756:	04 c0       	rjmp	.+8      	; 0x760 <__fp_round+0x20>
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__fp_split3>:
 762:	57 fd       	sbrc	r21, 7
 764:	90 58       	subi	r25, 0x80	; 128
 766:	44 0f       	add	r20, r20
 768:	55 1f       	adc	r21, r21
 76a:	59 f0       	breq	.+22     	; 0x782 <__fp_splitA+0x10>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	71 f0       	breq	.+28     	; 0x78c <__fp_splitA+0x1a>
 770:	47 95       	ror	r20

00000772 <__fp_splitA>:
 772:	88 0f       	add	r24, r24
 774:	97 fb       	bst	r25, 7
 776:	99 1f       	adc	r25, r25
 778:	61 f0       	breq	.+24     	; 0x792 <__fp_splitA+0x20>
 77a:	9f 3f       	cpi	r25, 0xFF	; 255
 77c:	79 f0       	breq	.+30     	; 0x79c <__fp_splitA+0x2a>
 77e:	87 95       	ror	r24
 780:	08 95       	ret
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	14 06       	cpc	r1, r20
 788:	55 1f       	adc	r21, r21
 78a:	f2 cf       	rjmp	.-28     	; 0x770 <__fp_split3+0xe>
 78c:	46 95       	lsr	r20
 78e:	f1 df       	rcall	.-30     	; 0x772 <__fp_splitA>
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <__fp_splitA+0x30>
 792:	16 16       	cp	r1, r22
 794:	17 06       	cpc	r1, r23
 796:	18 06       	cpc	r1, r24
 798:	99 1f       	adc	r25, r25
 79a:	f1 cf       	rjmp	.-30     	; 0x77e <__fp_splitA+0xc>
 79c:	86 95       	lsr	r24
 79e:	71 05       	cpc	r23, r1
 7a0:	61 05       	cpc	r22, r1
 7a2:	08 94       	sec
 7a4:	08 95       	ret

000007a6 <__fp_zero>:
 7a6:	e8 94       	clt

000007a8 <__fp_szero>:
 7a8:	bb 27       	eor	r27, r27
 7aa:	66 27       	eor	r22, r22
 7ac:	77 27       	eor	r23, r23
 7ae:	cb 01       	movw	r24, r22
 7b0:	97 f9       	bld	r25, 7
 7b2:	08 95       	ret

000007b4 <dtostrf>:
 7b4:	ef 92       	push	r14
 7b6:	0f 93       	push	r16
 7b8:	1f 93       	push	r17
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	e8 01       	movw	r28, r16
 7c0:	47 fd       	sbrc	r20, 7
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <dtostrf+0x14>
 7c4:	34 e0       	ldi	r19, 0x04	; 4
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <dtostrf+0x16>
 7c8:	34 e1       	ldi	r19, 0x14	; 20
 7ca:	04 2e       	mov	r0, r20
 7cc:	00 0c       	add	r0, r0
 7ce:	55 0b       	sbc	r21, r21
 7d0:	57 ff       	sbrs	r21, 7
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <dtostrf+0x26>
 7d4:	51 95       	neg	r21
 7d6:	41 95       	neg	r20
 7d8:	51 09       	sbc	r21, r1
 7da:	e3 2e       	mov	r14, r19
 7dc:	02 2f       	mov	r16, r18
 7de:	24 2f       	mov	r18, r20
 7e0:	ae 01       	movw	r20, r28
 7e2:	2c d0       	rcall	.+88     	; 0x83c <dtoa_prf>
 7e4:	ce 01       	movw	r24, r28
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	ef 90       	pop	r14
 7f0:	08 95       	ret

000007f2 <atoi>:
 7f2:	fc 01       	movw	r30, r24
 7f4:	88 27       	eor	r24, r24
 7f6:	99 27       	eor	r25, r25
 7f8:	e8 94       	clt
 7fa:	21 91       	ld	r18, Z+
 7fc:	20 32       	cpi	r18, 0x20	; 32
 7fe:	e9 f3       	breq	.-6      	; 0x7fa <atoi+0x8>
 800:	29 30       	cpi	r18, 0x09	; 9
 802:	10 f0       	brcs	.+4      	; 0x808 <atoi+0x16>
 804:	2e 30       	cpi	r18, 0x0E	; 14
 806:	c8 f3       	brcs	.-14     	; 0x7fa <atoi+0x8>
 808:	2b 32       	cpi	r18, 0x2B	; 43
 80a:	39 f0       	breq	.+14     	; 0x81a <atoi+0x28>
 80c:	2d 32       	cpi	r18, 0x2D	; 45
 80e:	31 f4       	brne	.+12     	; 0x81c <atoi+0x2a>
 810:	68 94       	set
 812:	03 c0       	rjmp	.+6      	; 0x81a <atoi+0x28>
 814:	0b d0       	rcall	.+22     	; 0x82c <__mulhi_const_10>
 816:	82 0f       	add	r24, r18
 818:	91 1d       	adc	r25, r1
 81a:	21 91       	ld	r18, Z+
 81c:	20 53       	subi	r18, 0x30	; 48
 81e:	2a 30       	cpi	r18, 0x0A	; 10
 820:	c8 f3       	brcs	.-14     	; 0x814 <atoi+0x22>
 822:	1e f4       	brtc	.+6      	; 0x82a <atoi+0x38>
 824:	90 95       	com	r25
 826:	81 95       	neg	r24
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__mulhi_const_10>:
 82c:	7a e0       	ldi	r23, 0x0A	; 10
 82e:	97 9f       	mul	r25, r23
 830:	90 2d       	mov	r25, r0
 832:	87 9f       	mul	r24, r23
 834:	80 2d       	mov	r24, r0
 836:	91 0d       	add	r25, r1
 838:	11 24       	eor	r1, r1
 83a:	08 95       	ret

0000083c <dtoa_prf>:
 83c:	8f 92       	push	r8
 83e:	9f 92       	push	r9
 840:	af 92       	push	r10
 842:	bf 92       	push	r11
 844:	cf 92       	push	r12
 846:	df 92       	push	r13
 848:	ef 92       	push	r14
 84a:	ff 92       	push	r15
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
 858:	29 97       	sbiw	r28, 0x09	; 9
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	f8 94       	cli
 85e:	de bf       	out	0x3e, r29	; 62
 860:	0f be       	out	0x3f, r0	; 63
 862:	cd bf       	out	0x3d, r28	; 61
 864:	6a 01       	movw	r12, r20
 866:	12 2f       	mov	r17, r18
 868:	b0 2e       	mov	r11, r16
 86a:	2b e3       	ldi	r18, 0x3B	; 59
 86c:	20 17       	cp	r18, r16
 86e:	20 f0       	brcs	.+8      	; 0x878 <dtoa_prf+0x3c>
 870:	ff 24       	eor	r15, r15
 872:	f3 94       	inc	r15
 874:	f0 0e       	add	r15, r16
 876:	02 c0       	rjmp	.+4      	; 0x87c <dtoa_prf+0x40>
 878:	2c e3       	ldi	r18, 0x3C	; 60
 87a:	f2 2e       	mov	r15, r18
 87c:	0f 2d       	mov	r16, r15
 87e:	27 e0       	ldi	r18, 0x07	; 7
 880:	ae 01       	movw	r20, r28
 882:	4f 5f       	subi	r20, 0xFF	; 255
 884:	5f 4f       	sbci	r21, 0xFF	; 255
 886:	50 d1       	rcall	.+672    	; 0xb28 <__ftoa_engine>
 888:	bc 01       	movw	r22, r24
 88a:	49 81       	ldd	r20, Y+1	; 0x01
 88c:	84 2f       	mov	r24, r20
 88e:	89 70       	andi	r24, 0x09	; 9
 890:	81 30       	cpi	r24, 0x01	; 1
 892:	31 f0       	breq	.+12     	; 0x8a0 <dtoa_prf+0x64>
 894:	e1 fc       	sbrc	r14, 1
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <dtoa_prf+0x68>
 898:	e0 fe       	sbrs	r14, 0
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <dtoa_prf+0x6c>
 89c:	90 e2       	ldi	r25, 0x20	; 32
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <dtoa_prf+0x6e>
 8a0:	9d e2       	ldi	r25, 0x2D	; 45
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <dtoa_prf+0x6e>
 8a4:	9b e2       	ldi	r25, 0x2B	; 43
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <dtoa_prf+0x6e>
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	5e 2d       	mov	r21, r14
 8ac:	50 71       	andi	r21, 0x10	; 16
 8ae:	43 ff       	sbrs	r20, 3
 8b0:	3c c0       	rjmp	.+120    	; 0x92a <dtoa_prf+0xee>
 8b2:	91 11       	cpse	r25, r1
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <dtoa_prf+0x7e>
 8b6:	83 e0       	ldi	r24, 0x03	; 3
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <dtoa_prf+0x80>
 8ba:	84 e0       	ldi	r24, 0x04	; 4
 8bc:	81 17       	cp	r24, r17
 8be:	18 f4       	brcc	.+6      	; 0x8c6 <dtoa_prf+0x8a>
 8c0:	21 2f       	mov	r18, r17
 8c2:	28 1b       	sub	r18, r24
 8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <dtoa_prf+0x8c>
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	51 11       	cpse	r21, r1
 8ca:	0b c0       	rjmp	.+22     	; 0x8e2 <dtoa_prf+0xa6>
 8cc:	f6 01       	movw	r30, r12
 8ce:	82 2f       	mov	r24, r18
 8d0:	30 e2       	ldi	r19, 0x20	; 32
 8d2:	88 23       	and	r24, r24
 8d4:	19 f0       	breq	.+6      	; 0x8dc <dtoa_prf+0xa0>
 8d6:	31 93       	st	Z+, r19
 8d8:	81 50       	subi	r24, 0x01	; 1
 8da:	fb cf       	rjmp	.-10     	; 0x8d2 <dtoa_prf+0x96>
 8dc:	c2 0e       	add	r12, r18
 8de:	d1 1c       	adc	r13, r1
 8e0:	20 e0       	ldi	r18, 0x00	; 0
 8e2:	99 23       	and	r25, r25
 8e4:	29 f0       	breq	.+10     	; 0x8f0 <dtoa_prf+0xb4>
 8e6:	d6 01       	movw	r26, r12
 8e8:	9c 93       	st	X, r25
 8ea:	f6 01       	movw	r30, r12
 8ec:	31 96       	adiw	r30, 0x01	; 1
 8ee:	6f 01       	movw	r12, r30
 8f0:	c6 01       	movw	r24, r12
 8f2:	03 96       	adiw	r24, 0x03	; 3
 8f4:	e2 fe       	sbrs	r14, 2
 8f6:	0a c0       	rjmp	.+20     	; 0x90c <dtoa_prf+0xd0>
 8f8:	3e e4       	ldi	r19, 0x4E	; 78
 8fa:	d6 01       	movw	r26, r12
 8fc:	3c 93       	st	X, r19
 8fe:	41 e4       	ldi	r20, 0x41	; 65
 900:	11 96       	adiw	r26, 0x01	; 1
 902:	4c 93       	st	X, r20
 904:	11 97       	sbiw	r26, 0x01	; 1
 906:	12 96       	adiw	r26, 0x02	; 2
 908:	3c 93       	st	X, r19
 90a:	06 c0       	rjmp	.+12     	; 0x918 <dtoa_prf+0xdc>
 90c:	3e e6       	ldi	r19, 0x6E	; 110
 90e:	f6 01       	movw	r30, r12
 910:	30 83       	st	Z, r19
 912:	41 e6       	ldi	r20, 0x61	; 97
 914:	41 83       	std	Z+1, r20	; 0x01
 916:	32 83       	std	Z+2, r19	; 0x02
 918:	fc 01       	movw	r30, r24
 91a:	32 2f       	mov	r19, r18
 91c:	40 e2       	ldi	r20, 0x20	; 32
 91e:	33 23       	and	r19, r19
 920:	09 f4       	brne	.+2      	; 0x924 <dtoa_prf+0xe8>
 922:	42 c0       	rjmp	.+132    	; 0x9a8 <dtoa_prf+0x16c>
 924:	41 93       	st	Z+, r20
 926:	31 50       	subi	r19, 0x01	; 1
 928:	fa cf       	rjmp	.-12     	; 0x91e <dtoa_prf+0xe2>
 92a:	42 ff       	sbrs	r20, 2
 92c:	44 c0       	rjmp	.+136    	; 0x9b6 <dtoa_prf+0x17a>
 92e:	91 11       	cpse	r25, r1
 930:	02 c0       	rjmp	.+4      	; 0x936 <dtoa_prf+0xfa>
 932:	83 e0       	ldi	r24, 0x03	; 3
 934:	01 c0       	rjmp	.+2      	; 0x938 <dtoa_prf+0xfc>
 936:	84 e0       	ldi	r24, 0x04	; 4
 938:	81 17       	cp	r24, r17
 93a:	18 f4       	brcc	.+6      	; 0x942 <dtoa_prf+0x106>
 93c:	21 2f       	mov	r18, r17
 93e:	28 1b       	sub	r18, r24
 940:	01 c0       	rjmp	.+2      	; 0x944 <dtoa_prf+0x108>
 942:	20 e0       	ldi	r18, 0x00	; 0
 944:	51 11       	cpse	r21, r1
 946:	0b c0       	rjmp	.+22     	; 0x95e <dtoa_prf+0x122>
 948:	f6 01       	movw	r30, r12
 94a:	82 2f       	mov	r24, r18
 94c:	30 e2       	ldi	r19, 0x20	; 32
 94e:	88 23       	and	r24, r24
 950:	19 f0       	breq	.+6      	; 0x958 <dtoa_prf+0x11c>
 952:	31 93       	st	Z+, r19
 954:	81 50       	subi	r24, 0x01	; 1
 956:	fb cf       	rjmp	.-10     	; 0x94e <dtoa_prf+0x112>
 958:	c2 0e       	add	r12, r18
 95a:	d1 1c       	adc	r13, r1
 95c:	20 e0       	ldi	r18, 0x00	; 0
 95e:	99 23       	and	r25, r25
 960:	29 f0       	breq	.+10     	; 0x96c <dtoa_prf+0x130>
 962:	d6 01       	movw	r26, r12
 964:	9c 93       	st	X, r25
 966:	f6 01       	movw	r30, r12
 968:	31 96       	adiw	r30, 0x01	; 1
 96a:	6f 01       	movw	r12, r30
 96c:	c6 01       	movw	r24, r12
 96e:	03 96       	adiw	r24, 0x03	; 3
 970:	e2 fe       	sbrs	r14, 2
 972:	0b c0       	rjmp	.+22     	; 0x98a <dtoa_prf+0x14e>
 974:	39 e4       	ldi	r19, 0x49	; 73
 976:	d6 01       	movw	r26, r12
 978:	3c 93       	st	X, r19
 97a:	3e e4       	ldi	r19, 0x4E	; 78
 97c:	11 96       	adiw	r26, 0x01	; 1
 97e:	3c 93       	st	X, r19
 980:	11 97       	sbiw	r26, 0x01	; 1
 982:	36 e4       	ldi	r19, 0x46	; 70
 984:	12 96       	adiw	r26, 0x02	; 2
 986:	3c 93       	st	X, r19
 988:	07 c0       	rjmp	.+14     	; 0x998 <dtoa_prf+0x15c>
 98a:	39 e6       	ldi	r19, 0x69	; 105
 98c:	f6 01       	movw	r30, r12
 98e:	30 83       	st	Z, r19
 990:	3e e6       	ldi	r19, 0x6E	; 110
 992:	31 83       	std	Z+1, r19	; 0x01
 994:	36 e6       	ldi	r19, 0x66	; 102
 996:	32 83       	std	Z+2, r19	; 0x02
 998:	fc 01       	movw	r30, r24
 99a:	32 2f       	mov	r19, r18
 99c:	40 e2       	ldi	r20, 0x20	; 32
 99e:	33 23       	and	r19, r19
 9a0:	19 f0       	breq	.+6      	; 0x9a8 <dtoa_prf+0x16c>
 9a2:	41 93       	st	Z+, r20
 9a4:	31 50       	subi	r19, 0x01	; 1
 9a6:	fb cf       	rjmp	.-10     	; 0x99e <dtoa_prf+0x162>
 9a8:	fc 01       	movw	r30, r24
 9aa:	e2 0f       	add	r30, r18
 9ac:	f1 1d       	adc	r31, r1
 9ae:	10 82       	st	Z, r1
 9b0:	8e ef       	ldi	r24, 0xFE	; 254
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	a6 c0       	rjmp	.+332    	; 0xb02 <dtoa_prf+0x2c6>
 9b6:	21 e0       	ldi	r18, 0x01	; 1
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	91 11       	cpse	r25, r1
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <dtoa_prf+0x186>
 9be:	20 e0       	ldi	r18, 0x00	; 0
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	1c f4       	brge	.+6      	; 0x9ce <dtoa_prf+0x192>
 9c8:	fb 01       	movw	r30, r22
 9ca:	31 96       	adiw	r30, 0x01	; 1
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <dtoa_prf+0x196>
 9ce:	e1 e0       	ldi	r30, 0x01	; 1
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	2e 0f       	add	r18, r30
 9d4:	3f 1f       	adc	r19, r31
 9d6:	bb 20       	and	r11, r11
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <dtoa_prf+0x1a6>
 9da:	eb 2d       	mov	r30, r11
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	31 96       	adiw	r30, 0x01	; 1
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <dtoa_prf+0x1aa>
 9e2:	e0 e0       	ldi	r30, 0x00	; 0
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	2e 0f       	add	r18, r30
 9e8:	3f 1f       	adc	r19, r31
 9ea:	e1 2f       	mov	r30, r17
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	2e 17       	cp	r18, r30
 9f0:	3f 07       	cpc	r19, r31
 9f2:	1c f4       	brge	.+6      	; 0x9fa <dtoa_prf+0x1be>
 9f4:	12 1b       	sub	r17, r18
 9f6:	21 2f       	mov	r18, r17
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <dtoa_prf+0x1c0>
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	8e 2d       	mov	r24, r14
 9fe:	88 71       	andi	r24, 0x18	; 24
 a00:	59 f4       	brne	.+22     	; 0xa18 <dtoa_prf+0x1dc>
 a02:	f6 01       	movw	r30, r12
 a04:	82 2f       	mov	r24, r18
 a06:	30 e2       	ldi	r19, 0x20	; 32
 a08:	88 23       	and	r24, r24
 a0a:	19 f0       	breq	.+6      	; 0xa12 <dtoa_prf+0x1d6>
 a0c:	31 93       	st	Z+, r19
 a0e:	81 50       	subi	r24, 0x01	; 1
 a10:	fb cf       	rjmp	.-10     	; 0xa08 <dtoa_prf+0x1cc>
 a12:	c2 0e       	add	r12, r18
 a14:	d1 1c       	adc	r13, r1
 a16:	20 e0       	ldi	r18, 0x00	; 0
 a18:	99 23       	and	r25, r25
 a1a:	29 f0       	breq	.+10     	; 0xa26 <dtoa_prf+0x1ea>
 a1c:	d6 01       	movw	r26, r12
 a1e:	9c 93       	st	X, r25
 a20:	f6 01       	movw	r30, r12
 a22:	31 96       	adiw	r30, 0x01	; 1
 a24:	6f 01       	movw	r12, r30
 a26:	51 11       	cpse	r21, r1
 a28:	0b c0       	rjmp	.+22     	; 0xa40 <dtoa_prf+0x204>
 a2a:	f6 01       	movw	r30, r12
 a2c:	82 2f       	mov	r24, r18
 a2e:	90 e3       	ldi	r25, 0x30	; 48
 a30:	88 23       	and	r24, r24
 a32:	19 f0       	breq	.+6      	; 0xa3a <dtoa_prf+0x1fe>
 a34:	91 93       	st	Z+, r25
 a36:	81 50       	subi	r24, 0x01	; 1
 a38:	fb cf       	rjmp	.-10     	; 0xa30 <dtoa_prf+0x1f4>
 a3a:	c2 0e       	add	r12, r18
 a3c:	d1 1c       	adc	r13, r1
 a3e:	20 e0       	ldi	r18, 0x00	; 0
 a40:	0f 2d       	mov	r16, r15
 a42:	06 0f       	add	r16, r22
 a44:	9a 81       	ldd	r25, Y+2	; 0x02
 a46:	34 2f       	mov	r19, r20
 a48:	30 71       	andi	r19, 0x10	; 16
 a4a:	44 ff       	sbrs	r20, 4
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <dtoa_prf+0x218>
 a4e:	91 33       	cpi	r25, 0x31	; 49
 a50:	09 f4       	brne	.+2      	; 0xa54 <dtoa_prf+0x218>
 a52:	01 50       	subi	r16, 0x01	; 1
 a54:	10 16       	cp	r1, r16
 a56:	24 f4       	brge	.+8      	; 0xa60 <dtoa_prf+0x224>
 a58:	09 30       	cpi	r16, 0x09	; 9
 a5a:	18 f0       	brcs	.+6      	; 0xa62 <dtoa_prf+0x226>
 a5c:	08 e0       	ldi	r16, 0x08	; 8
 a5e:	01 c0       	rjmp	.+2      	; 0xa62 <dtoa_prf+0x226>
 a60:	01 e0       	ldi	r16, 0x01	; 1
 a62:	ab 01       	movw	r20, r22
 a64:	77 ff       	sbrs	r23, 7
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <dtoa_prf+0x230>
 a68:	40 e0       	ldi	r20, 0x00	; 0
 a6a:	50 e0       	ldi	r21, 0x00	; 0
 a6c:	fb 01       	movw	r30, r22
 a6e:	e4 1b       	sub	r30, r20
 a70:	f5 0b       	sbc	r31, r21
 a72:	a1 e0       	ldi	r26, 0x01	; 1
 a74:	b0 e0       	ldi	r27, 0x00	; 0
 a76:	ac 0f       	add	r26, r28
 a78:	bd 1f       	adc	r27, r29
 a7a:	ea 0f       	add	r30, r26
 a7c:	fb 1f       	adc	r31, r27
 a7e:	8e e2       	ldi	r24, 0x2E	; 46
 a80:	a8 2e       	mov	r10, r24
 a82:	4b 01       	movw	r8, r22
 a84:	80 1a       	sub	r8, r16
 a86:	91 08       	sbc	r9, r1
 a88:	0b 2d       	mov	r16, r11
 a8a:	10 e0       	ldi	r17, 0x00	; 0
 a8c:	11 95       	neg	r17
 a8e:	01 95       	neg	r16
 a90:	11 09       	sbc	r17, r1
 a92:	4f 3f       	cpi	r20, 0xFF	; 255
 a94:	bf ef       	ldi	r27, 0xFF	; 255
 a96:	5b 07       	cpc	r21, r27
 a98:	21 f4       	brne	.+8      	; 0xaa2 <dtoa_prf+0x266>
 a9a:	d6 01       	movw	r26, r12
 a9c:	ac 92       	st	X, r10
 a9e:	11 96       	adiw	r26, 0x01	; 1
 aa0:	6d 01       	movw	r12, r26
 aa2:	64 17       	cp	r22, r20
 aa4:	75 07       	cpc	r23, r21
 aa6:	2c f0       	brlt	.+10     	; 0xab2 <dtoa_prf+0x276>
 aa8:	84 16       	cp	r8, r20
 aaa:	95 06       	cpc	r9, r21
 aac:	14 f4       	brge	.+4      	; 0xab2 <dtoa_prf+0x276>
 aae:	81 81       	ldd	r24, Z+1	; 0x01
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <dtoa_prf+0x278>
 ab2:	80 e3       	ldi	r24, 0x30	; 48
 ab4:	41 50       	subi	r20, 0x01	; 1
 ab6:	51 09       	sbc	r21, r1
 ab8:	31 96       	adiw	r30, 0x01	; 1
 aba:	d6 01       	movw	r26, r12
 abc:	11 96       	adiw	r26, 0x01	; 1
 abe:	7d 01       	movw	r14, r26
 ac0:	40 17       	cp	r20, r16
 ac2:	51 07       	cpc	r21, r17
 ac4:	24 f0       	brlt	.+8      	; 0xace <dtoa_prf+0x292>
 ac6:	d6 01       	movw	r26, r12
 ac8:	8c 93       	st	X, r24
 aca:	67 01       	movw	r12, r14
 acc:	e2 cf       	rjmp	.-60     	; 0xa92 <dtoa_prf+0x256>
 ace:	64 17       	cp	r22, r20
 ad0:	75 07       	cpc	r23, r21
 ad2:	39 f4       	brne	.+14     	; 0xae2 <dtoa_prf+0x2a6>
 ad4:	96 33       	cpi	r25, 0x36	; 54
 ad6:	20 f4       	brcc	.+8      	; 0xae0 <dtoa_prf+0x2a4>
 ad8:	95 33       	cpi	r25, 0x35	; 53
 ada:	19 f4       	brne	.+6      	; 0xae2 <dtoa_prf+0x2a6>
 adc:	31 11       	cpse	r19, r1
 ade:	01 c0       	rjmp	.+2      	; 0xae2 <dtoa_prf+0x2a6>
 ae0:	81 e3       	ldi	r24, 0x31	; 49
 ae2:	f6 01       	movw	r30, r12
 ae4:	80 83       	st	Z, r24
 ae6:	f7 01       	movw	r30, r14
 ae8:	82 2f       	mov	r24, r18
 aea:	90 e2       	ldi	r25, 0x20	; 32
 aec:	88 23       	and	r24, r24
 aee:	19 f0       	breq	.+6      	; 0xaf6 <dtoa_prf+0x2ba>
 af0:	91 93       	st	Z+, r25
 af2:	81 50       	subi	r24, 0x01	; 1
 af4:	fb cf       	rjmp	.-10     	; 0xaec <dtoa_prf+0x2b0>
 af6:	f7 01       	movw	r30, r14
 af8:	e2 0f       	add	r30, r18
 afa:	f1 1d       	adc	r31, r1
 afc:	10 82       	st	Z, r1
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	29 96       	adiw	r28, 0x09	; 9
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	f8 94       	cli
 b08:	de bf       	out	0x3e, r29	; 62
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	cd bf       	out	0x3d, r28	; 61
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	1f 91       	pop	r17
 b14:	0f 91       	pop	r16
 b16:	ff 90       	pop	r15
 b18:	ef 90       	pop	r14
 b1a:	df 90       	pop	r13
 b1c:	cf 90       	pop	r12
 b1e:	bf 90       	pop	r11
 b20:	af 90       	pop	r10
 b22:	9f 90       	pop	r9
 b24:	8f 90       	pop	r8
 b26:	08 95       	ret

00000b28 <__ftoa_engine>:
 b28:	28 30       	cpi	r18, 0x08	; 8
 b2a:	08 f0       	brcs	.+2      	; 0xb2e <__ftoa_engine+0x6>
 b2c:	27 e0       	ldi	r18, 0x07	; 7
 b2e:	33 27       	eor	r19, r19
 b30:	da 01       	movw	r26, r20
 b32:	99 0f       	add	r25, r25
 b34:	31 1d       	adc	r19, r1
 b36:	87 fd       	sbrc	r24, 7
 b38:	91 60       	ori	r25, 0x01	; 1
 b3a:	00 96       	adiw	r24, 0x00	; 0
 b3c:	61 05       	cpc	r22, r1
 b3e:	71 05       	cpc	r23, r1
 b40:	39 f4       	brne	.+14     	; 0xb50 <__ftoa_engine+0x28>
 b42:	32 60       	ori	r19, 0x02	; 2
 b44:	2e 5f       	subi	r18, 0xFE	; 254
 b46:	3d 93       	st	X+, r19
 b48:	30 e3       	ldi	r19, 0x30	; 48
 b4a:	2a 95       	dec	r18
 b4c:	e1 f7       	brne	.-8      	; 0xb46 <__ftoa_engine+0x1e>
 b4e:	08 95       	ret
 b50:	9f 3f       	cpi	r25, 0xFF	; 255
 b52:	30 f0       	brcs	.+12     	; 0xb60 <__ftoa_engine+0x38>
 b54:	80 38       	cpi	r24, 0x80	; 128
 b56:	71 05       	cpc	r23, r1
 b58:	61 05       	cpc	r22, r1
 b5a:	09 f0       	breq	.+2      	; 0xb5e <__ftoa_engine+0x36>
 b5c:	3c 5f       	subi	r19, 0xFC	; 252
 b5e:	3c 5f       	subi	r19, 0xFC	; 252
 b60:	3d 93       	st	X+, r19
 b62:	91 30       	cpi	r25, 0x01	; 1
 b64:	08 f0       	brcs	.+2      	; 0xb68 <__ftoa_engine+0x40>
 b66:	80 68       	ori	r24, 0x80	; 128
 b68:	91 1d       	adc	r25, r1
 b6a:	df 93       	push	r29
 b6c:	cf 93       	push	r28
 b6e:	1f 93       	push	r17
 b70:	0f 93       	push	r16
 b72:	ff 92       	push	r15
 b74:	ef 92       	push	r14
 b76:	19 2f       	mov	r17, r25
 b78:	98 7f       	andi	r25, 0xF8	; 248
 b7a:	96 95       	lsr	r25
 b7c:	e9 2f       	mov	r30, r25
 b7e:	96 95       	lsr	r25
 b80:	96 95       	lsr	r25
 b82:	e9 0f       	add	r30, r25
 b84:	ff 27       	eor	r31, r31
 b86:	ea 51       	subi	r30, 0x1A	; 26
 b88:	ff 4f       	sbci	r31, 0xFF	; 255
 b8a:	99 27       	eor	r25, r25
 b8c:	33 27       	eor	r19, r19
 b8e:	ee 24       	eor	r14, r14
 b90:	ff 24       	eor	r15, r15
 b92:	a7 01       	movw	r20, r14
 b94:	e7 01       	movw	r28, r14
 b96:	05 90       	lpm	r0, Z+
 b98:	08 94       	sec
 b9a:	07 94       	ror	r0
 b9c:	28 f4       	brcc	.+10     	; 0xba8 <__ftoa_engine+0x80>
 b9e:	36 0f       	add	r19, r22
 ba0:	e7 1e       	adc	r14, r23
 ba2:	f8 1e       	adc	r15, r24
 ba4:	49 1f       	adc	r20, r25
 ba6:	51 1d       	adc	r21, r1
 ba8:	66 0f       	add	r22, r22
 baa:	77 1f       	adc	r23, r23
 bac:	88 1f       	adc	r24, r24
 bae:	99 1f       	adc	r25, r25
 bb0:	06 94       	lsr	r0
 bb2:	a1 f7       	brne	.-24     	; 0xb9c <__ftoa_engine+0x74>
 bb4:	05 90       	lpm	r0, Z+
 bb6:	07 94       	ror	r0
 bb8:	28 f4       	brcc	.+10     	; 0xbc4 <__ftoa_engine+0x9c>
 bba:	e7 0e       	add	r14, r23
 bbc:	f8 1e       	adc	r15, r24
 bbe:	49 1f       	adc	r20, r25
 bc0:	56 1f       	adc	r21, r22
 bc2:	c1 1d       	adc	r28, r1
 bc4:	77 0f       	add	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	66 1f       	adc	r22, r22
 bcc:	06 94       	lsr	r0
 bce:	a1 f7       	brne	.-24     	; 0xbb8 <__ftoa_engine+0x90>
 bd0:	05 90       	lpm	r0, Z+
 bd2:	07 94       	ror	r0
 bd4:	28 f4       	brcc	.+10     	; 0xbe0 <__ftoa_engine+0xb8>
 bd6:	f8 0e       	add	r15, r24
 bd8:	49 1f       	adc	r20, r25
 bda:	56 1f       	adc	r21, r22
 bdc:	c7 1f       	adc	r28, r23
 bde:	d1 1d       	adc	r29, r1
 be0:	88 0f       	add	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	66 1f       	adc	r22, r22
 be6:	77 1f       	adc	r23, r23
 be8:	06 94       	lsr	r0
 bea:	a1 f7       	brne	.-24     	; 0xbd4 <__ftoa_engine+0xac>
 bec:	05 90       	lpm	r0, Z+
 bee:	07 94       	ror	r0
 bf0:	20 f4       	brcc	.+8      	; 0xbfa <__ftoa_engine+0xd2>
 bf2:	49 0f       	add	r20, r25
 bf4:	56 1f       	adc	r21, r22
 bf6:	c7 1f       	adc	r28, r23
 bf8:	d8 1f       	adc	r29, r24
 bfa:	99 0f       	add	r25, r25
 bfc:	66 1f       	adc	r22, r22
 bfe:	77 1f       	adc	r23, r23
 c00:	88 1f       	adc	r24, r24
 c02:	06 94       	lsr	r0
 c04:	a9 f7       	brne	.-22     	; 0xbf0 <__ftoa_engine+0xc8>
 c06:	84 91       	lpm	r24, Z
 c08:	10 95       	com	r17
 c0a:	17 70       	andi	r17, 0x07	; 7
 c0c:	41 f0       	breq	.+16     	; 0xc1e <__ftoa_engine+0xf6>
 c0e:	d6 95       	lsr	r29
 c10:	c7 95       	ror	r28
 c12:	57 95       	ror	r21
 c14:	47 95       	ror	r20
 c16:	f7 94       	ror	r15
 c18:	e7 94       	ror	r14
 c1a:	1a 95       	dec	r17
 c1c:	c1 f7       	brne	.-16     	; 0xc0e <__ftoa_engine+0xe6>
 c1e:	ec e8       	ldi	r30, 0x8C	; 140
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	68 94       	set
 c24:	15 90       	lpm	r1, Z+
 c26:	15 91       	lpm	r17, Z+
 c28:	35 91       	lpm	r19, Z+
 c2a:	65 91       	lpm	r22, Z+
 c2c:	95 91       	lpm	r25, Z+
 c2e:	05 90       	lpm	r0, Z+
 c30:	7f e2       	ldi	r23, 0x2F	; 47
 c32:	73 95       	inc	r23
 c34:	e1 18       	sub	r14, r1
 c36:	f1 0a       	sbc	r15, r17
 c38:	43 0b       	sbc	r20, r19
 c3a:	56 0b       	sbc	r21, r22
 c3c:	c9 0b       	sbc	r28, r25
 c3e:	d0 09       	sbc	r29, r0
 c40:	c0 f7       	brcc	.-16     	; 0xc32 <__ftoa_engine+0x10a>
 c42:	e1 0c       	add	r14, r1
 c44:	f1 1e       	adc	r15, r17
 c46:	43 1f       	adc	r20, r19
 c48:	56 1f       	adc	r21, r22
 c4a:	c9 1f       	adc	r28, r25
 c4c:	d0 1d       	adc	r29, r0
 c4e:	7e f4       	brtc	.+30     	; 0xc6e <__ftoa_engine+0x146>
 c50:	70 33       	cpi	r23, 0x30	; 48
 c52:	11 f4       	brne	.+4      	; 0xc58 <__ftoa_engine+0x130>
 c54:	8a 95       	dec	r24
 c56:	e6 cf       	rjmp	.-52     	; 0xc24 <__ftoa_engine+0xfc>
 c58:	e8 94       	clt
 c5a:	01 50       	subi	r16, 0x01	; 1
 c5c:	30 f0       	brcs	.+12     	; 0xc6a <__ftoa_engine+0x142>
 c5e:	08 0f       	add	r16, r24
 c60:	0a f4       	brpl	.+2      	; 0xc64 <__ftoa_engine+0x13c>
 c62:	00 27       	eor	r16, r16
 c64:	02 17       	cp	r16, r18
 c66:	08 f4       	brcc	.+2      	; 0xc6a <__ftoa_engine+0x142>
 c68:	20 2f       	mov	r18, r16
 c6a:	23 95       	inc	r18
 c6c:	02 2f       	mov	r16, r18
 c6e:	7a 33       	cpi	r23, 0x3A	; 58
 c70:	28 f0       	brcs	.+10     	; 0xc7c <__ftoa_engine+0x154>
 c72:	79 e3       	ldi	r23, 0x39	; 57
 c74:	7d 93       	st	X+, r23
 c76:	2a 95       	dec	r18
 c78:	e9 f7       	brne	.-6      	; 0xc74 <__ftoa_engine+0x14c>
 c7a:	10 c0       	rjmp	.+32     	; 0xc9c <__ftoa_engine+0x174>
 c7c:	7d 93       	st	X+, r23
 c7e:	2a 95       	dec	r18
 c80:	89 f6       	brne	.-94     	; 0xc24 <__ftoa_engine+0xfc>
 c82:	06 94       	lsr	r0
 c84:	97 95       	ror	r25
 c86:	67 95       	ror	r22
 c88:	37 95       	ror	r19
 c8a:	17 95       	ror	r17
 c8c:	17 94       	ror	r1
 c8e:	e1 18       	sub	r14, r1
 c90:	f1 0a       	sbc	r15, r17
 c92:	43 0b       	sbc	r20, r19
 c94:	56 0b       	sbc	r21, r22
 c96:	c9 0b       	sbc	r28, r25
 c98:	d0 09       	sbc	r29, r0
 c9a:	98 f0       	brcs	.+38     	; 0xcc2 <__ftoa_engine+0x19a>
 c9c:	23 95       	inc	r18
 c9e:	7e 91       	ld	r23, -X
 ca0:	73 95       	inc	r23
 ca2:	7a 33       	cpi	r23, 0x3A	; 58
 ca4:	08 f0       	brcs	.+2      	; 0xca8 <__ftoa_engine+0x180>
 ca6:	70 e3       	ldi	r23, 0x30	; 48
 ca8:	7c 93       	st	X, r23
 caa:	20 13       	cpse	r18, r16
 cac:	b8 f7       	brcc	.-18     	; 0xc9c <__ftoa_engine+0x174>
 cae:	7e 91       	ld	r23, -X
 cb0:	70 61       	ori	r23, 0x10	; 16
 cb2:	7d 93       	st	X+, r23
 cb4:	30 f0       	brcs	.+12     	; 0xcc2 <__ftoa_engine+0x19a>
 cb6:	83 95       	inc	r24
 cb8:	71 e3       	ldi	r23, 0x31	; 49
 cba:	7d 93       	st	X+, r23
 cbc:	70 e3       	ldi	r23, 0x30	; 48
 cbe:	2a 95       	dec	r18
 cc0:	e1 f7       	brne	.-8      	; 0xcba <__ftoa_engine+0x192>
 cc2:	11 24       	eor	r1, r1
 cc4:	ef 90       	pop	r14
 cc6:	ff 90       	pop	r15
 cc8:	0f 91       	pop	r16
 cca:	1f 91       	pop	r17
 ccc:	cf 91       	pop	r28
 cce:	df 91       	pop	r29
 cd0:	99 27       	eor	r25, r25
 cd2:	87 fd       	sbrc	r24, 7
 cd4:	90 95       	com	r25
 cd6:	08 95       	ret

00000cd8 <_exit>:
 cd8:	f8 94       	cli

00000cda <__stop_program>:
 cda:	ff cf       	rjmp	.-2      	; 0xcda <__stop_program>
